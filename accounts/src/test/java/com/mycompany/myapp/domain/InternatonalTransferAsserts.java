package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class InternatonalTransferAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInternatonalTransferAllPropertiesEquals(InternatonalTransfer expected, InternatonalTransfer actual) {
        assertInternatonalTransferAutoGeneratedPropertiesEquals(expected, actual);
        assertInternatonalTransferAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInternatonalTransferAllUpdatablePropertiesEquals(InternatonalTransfer expected, InternatonalTransfer actual) {
        assertInternatonalTransferUpdatableFieldsEquals(expected, actual);
        assertInternatonalTransferUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInternatonalTransferAutoGeneratedPropertiesEquals(InternatonalTransfer expected, InternatonalTransfer actual) {
        assertThat(expected)
            .as("Verify InternatonalTransfer auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInternatonalTransferUpdatableFieldsEquals(InternatonalTransfer expected, InternatonalTransfer actual) {
        assertThat(expected)
            .as("Verify InternatonalTransfer relevant properties")
            .satisfies(e ->
                assertThat(e.getSenderAccountNumber()).as("check senderAccountNumber").isEqualTo(actual.getSenderAccountNumber())
            )
            .satisfies(e -> assertThat(e.getRecipientIban()).as("check recipientIban").isEqualTo(actual.getRecipientIban()))
            .satisfies(e -> assertThat(e.getSwiftCode()).as("check swiftCode").isEqualTo(actual.getSwiftCode()))
            .satisfies(e -> assertThat(e.getRecipientName()).as("check recipientName").isEqualTo(actual.getRecipientName()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getCurrency()).as("check currency").isEqualTo(actual.getCurrency()))
            .satisfies(e -> assertThat(e.getTransactionDate()).as("check transactionDate").isEqualTo(actual.getTransactionDate()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInternatonalTransferUpdatableRelationshipsEquals(InternatonalTransfer expected, InternatonalTransfer actual) {
        assertThat(expected)
            .as("Verify InternatonalTransfer relationships")
            .satisfies(e -> assertThat(e.getBankAccount()).as("check bankAccount").isEqualTo(actual.getBankAccount()));
    }
}
